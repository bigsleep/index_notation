#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "expression_parser.y".
#

require 'racc/parser'


require './binary_tree'

class ExpressionParser < Racc::Parser

module_eval <<'..end expression_parser.y modeval..id5308d7a1f0', 'expression_parser.y', 75
  def parse(str)
    @q = []
    until str.empty?
      case str
      when /\A\w+/
        @q.push [:VAR, $&]
      when /\A.|\n/o
        s = $&
        @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

..end expression_parser.y modeval..id5308d7a1f0

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 12, :_reduce_none,
 0, 12, :_reduce_2,
 3, 13, :_reduce_3,
 3, 13, :_reduce_4,
 3, 13, :_reduce_5,
 3, 13, :_reduce_6,
 3, 13, :_reduce_7,
 3, 13, :_reduce_8,
 3, 13, :_reduce_9,
 2, 13, :_reduce_10,
 1, 13, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 22

racc_action_table = [
     6,     7,     8,     9,    10,    11,    12,     6,     7,     8,
     9,    10,    11,    12,     3,     3,     3,     3,     4,     4,
     4,     4,     3,     3,     3,     3,     4,     4,     4,     4,
     6,     7,     8,     9,     6,     7,     8,     9,     6,     7,
     6,     7,     5,    14,    13 ]

racc_action_check = [
    21,    21,    21,    21,    21,    21,    21,     2,     2,     2,
     2,     2,     2,     2,     9,     0,    12,     6,     9,     0,
    12,     6,     7,     8,    10,    11,     7,     8,    10,    11,
    19,    19,    19,    19,    20,    20,    20,    20,    17,    17,
    18,    18,     1,     5,     3 ]

racc_action_pointer = [
     9,    42,     4,    34,   nil,    43,    11,    16,    17,     8,
    18,    19,    10,   nil,   nil,   nil,   nil,    35,    37,    27,
    31,    -3 ]

racc_action_default = [
    -2,   -12,    -1,   -12,   -11,   -12,   -12,   -12,   -12,   -12,
   -12,   -12,   -12,   -10,    22,    -8,    -9,    -6,    -7,    -4,
    -5,    -3 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,    15,    16,    17,    18,
    19,    20,    21 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,     2,     2,     2,     2,
     2,     2,     2 ]

racc_goto_pointer = [
   nil,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 "*" => 3,
 "/" => 4,
 "+" => 5,
 "-" => 6,
 ">" => 7,
 "<" => 8,
 "=" => 9,
 :VAR => 10 }

racc_use_result_var = true

racc_nt_base = 11

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'"*"',
'"/"',
'"+"',
'"-"',
'">"',
'"<"',
'"="',
'VAR',
'$start',
'target',
'exp']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'expression_parser.y', 12
  def _reduce_2( val, _values, result )
 result = 0
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 20
  def _reduce_3( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 26
  def _reduce_4( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 32
  def _reduce_5( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 38
  def _reduce_6( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 44
  def _reduce_7( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 50
  def _reduce_8( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 56
  def _reduce_9( val, _values, result )
       result.insert(result.begin_preorder, val[1])
       result.append_tree_right(result.begin_preorder, val[2])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 63
  def _reduce_10( val, _values, result )
       result = Creek::BinaryTree.new
       result.insert(result.begin_preorder, val[0])
       result.append_child_right(result.begin_preorder, val[1])
       return result
   result
  end
.,.,

module_eval <<'.,.,', 'expression_parser.y', 69
  def _reduce_11( val, _values, result )
       result = Creek::BinaryTree.new
       result.insert(result.begin_preorder, val[0])
       return result
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class ExpressionParser
